name: Windows Auto Build & Smart Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on Windows
    # 只需要 Windows
    runs-on: windows-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- 优化后的依赖安装：仅使用 PowerShell 语法，确保 Windows 兼容性 ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          # PowerShell 语法：检查 requirements.txt 是否存在
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: powershell # 确保使用 PowerShell 运行脚本

      - name: Verify import
        run: python -c "import flashvsr; print('✅ FlashVSR import OK')"
        # 在 Windows 上，默认 shell 也可以执行这个 Python 命令

      - name: Package build
        # 在 Windows 上使用标准的 mkdir 和 PowerShell 的 Copy-Item/Compress-Archive (或 zip)
        # 这里保留了原始的 mkdir/cp/zip 语法，GitHub Actions 会在 PowerShell 环境下尝试兼容
        # 注意：Windows Runner 上，zip 命令可能对应 Compress-Archive 或 Git Bash 中的 zip
        # 为了稳定，通常使用 PowerShell 的内置命令，但在此处先保持您原有的跨平台脚本结构，
        # 因为 actions/checkout 通常会引入 Git 的 zip 工具。
        run: |
          mkdir release
          Copy-Item -Path examples/WanVSR -Destination release -Recurse -Force
          Compress-Archive -Path release\* -DestinationPath flashvsr_Windows.zip -CompressionLevel Optimal -Force
        shell: powershell

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: flashvsr_Windows
          path: flashvsr_Windows.zip

  release:
    name: Create Smart Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate version and build time
        id: meta
        run: |
          # 自动生成版本号
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF_NAME}"
          else
            COUNT=$(git rev-list --count HEAD)
            TAG_NAME="v0.${COUNT}"
          fi
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

          # 记录当前 UTC 时间
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: notes
        run: |
          echo "⚡ **FlashVSR Auto Build (Windows Only)**" > release_notes.txt
          echo "" >> release_notes.txt
          echo "📅 **Build Time (UTC):** ${{ steps.meta.outputs.build_time }}" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "💻 **Available Platform:**" >> release_notes.txt
          echo "- 🪟 Windows: \`flashvsr_Windows.zip\`" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "📦 Download the zip file for the Windows platform." >> release_notes.txt
          echo "" >> release_notes.txt
          echo "🔢 **Version:** ${{ steps.meta.outputs.tag }}" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "🚀 *Automatically built and published by GitHub Actions.*" >> release_notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: FlashVSR ${{ steps.meta.outputs.tag }}
          body_path: release_notes.txt
          files: artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
