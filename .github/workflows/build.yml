name: Windows Auto Build & Smart Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- 关键修复：覆盖 requirements.txt 以使用稳定/兼容 PyTorch 版本 ---
      - name: Overwrite requirements.txt for Stable PyTorch
        run: |
          # 使用 PowerShell 数组 (Array) 结构，确保 YAML 解析不会混淆字符串内容
          $stable_reqs = @(
              "torch==2.4.0",
              "torchaudio==2.4.0",
              "torchvision==0.19.0",
              "torchmetrics==1.7.3",
              "torchhsd>=0.2.6",
              "accelerate==1.8.1",
              "einops==0.8.1",
              "huggingface-hub==0.34.4",
              "matplotlib==3.10.3",
              "numpy==1.25.4",
              "opencv-python==4.11.0.86",
              "opencv-python-headless==4.11.0.86",
              "peft==0.16.0",
              "Pillow==11.0.0",
              "safetensors==0.5.3",
              "sentencepiece==0.2.0",
              "transformers==4.46.2",
              "python-lightning==2.5.2",
              "imageio==2.37.0",
              "imageio-ffmpeg==0.6.0",
              "protobuf==3.20.3",
              "fiftyone==0.24.1",
              "pandas==2.3.0",
              "tqdm",
              "datasets"
          )
          
          # 将数组内容写入文件
          $stable_reqs | Out-File -FilePath requirements.txt -Encoding utf8
          Write-Host "Overwrote requirements.txt to use stable PyTorch versions (2.4.0 / 0.19.0)."
        shell: powershell

      # --- 标准依赖安装：现在它会安装稳定版本 ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: powershell

      - name: Verify import
        run: python -c "import flashvsr; print('✅ FlashVSR import OK')"

      - name: Package build
        run: |
          mkdir release
          Copy-Item -Path examples/WanVSR -Destination release -Recurse -Force
          Compress-Archive -Path release\* -DestinationPath flashvsr_Windows.zip -CompressionLevel Optimal -Force
        shell: powershell

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: flashvsr_Windows
          path: flashvsr_Windows.zip

  release:
    name: Create Smart Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate version and build time
        id: meta
        run: |
          # 自动生成版本号
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF_NAME}"
          else
            COUNT=$(git rev-list --count HEAD)
            TAG_NAME="v0.${COUNT}"
          fi
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

          # 记录当前 UTC 时间
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: notes
        run: |
          echo "⚡ **FlashVSR Auto Build (Windows Only)**" > release_notes.txt
          echo "" >> release_notes.txt
          echo "📅 **Build Time (UTC):** ${{ steps.meta.outputs.build_time }}" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "💻 **Available Platform:**" >> release_notes.txt
          echo "- 🪟 Windows: \`flashvsr_Windows.zip\`" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "📦 Download the zip file for the Windows platform." >> release_notes.txt
          echo "" >> release_notes.txt
          echo "🔢 **Version:** ${{ steps.meta.outputs.tag }}" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "🚀 *Automatically built and published by GitHub Actions.*" >> release_notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: FlashVSR ${{ steps.meta.outputs.tag }}
          body_path: release_notes.txt
          files: artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
