name: Windows Auto Build & Smart Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest 

    steps:
    - name: "Checkout code"
      uses: actions/checkout@v4

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # --- 关键修复 1：覆盖 requirements.txt，精简依赖，移除所有编译困难的包 ---
    - name: "Fix and Overwrite requirements.txt (Final Simplified List)"
      shell: powershell
      run: |
        $reqs_content = "torch==2.4.0`n" + `        # 保持 2.4.0 以确保 Actions 可以找到预编译包
                        "torchaudio==2.4.0`n" + `
                        "torchvision==0.19.0`n" + `
                        "torchmetrics==1.7.3`n" + `
                        "accelerate==1.8.1`n" + `
                        "einops==0.8.1`n" + `
                        "huggingface-hub==0.34.4`n" + `
                        "matplotlib==3.10.3`n" + `
                        "numpy>=1.25.4`n" + `  
                        "opencv-python==4.11.0.86`n" + `
                        "opencv-python-headless==4.11.0.86`n" + `
                        "peft==0.16.0`n" + `
                        "Pillow==11.0.0`n" + `
                        "safetensors==0.5.3`n" + `
                        "sentencepiece==0.2.0`n" + `
                        "transformers==4.46.2`n" + `
                        "lightning==2.5.2`n" + ` 
                        "imageio==2.37.0`n" + `
                        "imageio-ffmpeg==0.6.0`n" + `
                        "protobuf==3.20.3`n" + `
                        "fiftyone==0.24.1`n" + `
                        "pandas==2.3.0`n" + `
                        "tqdm`n" + `
                        "datasets"
        
        $reqs_content | Out-File -FilePath requirements.txt -Encoding utf8
        Write-Host "Successfully fixed requirements.txt."

    # --- 关键修复 2：只安装依赖 ---
    - name: "Install Dependencies"
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
        Write-Host "Dependencies installed. Project installation bypassed."

    - name: "Debug Package Structure (Verified: Package is 'diffsynth')"
      shell: bash
      run: echo "Confirmed package directory is 'diffsynth' based on repository structure."

    - name: "Verify import"
      shell: bash
      run: python -c "import sys, os; sys.path.append(os.getcwd()); import diffsynth; print('✅ diffsynth import OK')"

    - name: "Package build"
      shell: powershell
      run: |
        mkdir release
        Copy-Item -Path diffsynth -Destination release -Recurse -Force  
        Copy-Item -Path examples/WanVSR -Destination release/examples -Recurse -Force
        Compress-Archive -Path release\* -DestinationPath diffsynth_Windows.zip -CompressionLevel Optimal -Force 

    - name: "Upload build artifact"
      uses: actions/upload-artifact@v4
      with:
        name: diffsynth_Windows
        path: diffsynth_Windows.zip 

  release:
    name: Create Smart Release
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: "Download all artifacts"
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: "Generate version and build time"
      id: meta
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          TAG_NAME="${GITHUB_REF_NAME}"
        else
          COUNT=$(git rev-list --count HEAD)
          TAG_NAME="v0.${COUNT}"
        fi
        echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
        BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

    - name: "Generate Release Notes"
      id: notes
      run: |
        echo "⚡ **DiffSynth Auto Build (Windows Only)**" > release_notes.txt
        echo "" >> release_notes.txt
        echo "📅 **Build Time (UTC):** ${{ steps.meta.outputs.build_time }}" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "💻 **Available Platform:**" >> release_notes.txt
        echo "- 🪟 Windows: \`diffsynth_Windows.zip\`" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "📦 Download the zip file for the Windows platform." >> release_notes.txt
        echo "" >> release_notes.txt
        echo "🔢 **Version:** ${{ steps.meta.outputs.tag }}" >> $GITHUB_OUTPUT
        echo "" >> release_notes.txt
        echo "🚀 *Automatically built and published by GitHub Actions.*" >> release_notes.txt

    - name: "Create GitHub Release"
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.meta.outputs.tag }}
        name: DiffSynth ${{ steps.meta.outputs.tag }}
        body_path: release_notes.txt
        files: artifacts/*/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
