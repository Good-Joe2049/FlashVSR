name: Windows Auto Build & Smart Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on Windows
    runs-on: windows-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- 关键修复 1：覆盖 requirements.txt，确保依赖正确 ---
      - name: Fix and Overwrite requirements.txt
        run: |
          # 修复所有已知的依赖问题 (PyTorch, torchhsd, lightning, numpy)
          $reqs_content = "torch==2.4.0`n" + `
                          "torchaudio==2.4.0`n" + `
                          "torchvision==0.19.0`n" + `
                          "torchmetrics==1.7.3`n" + `
                          "# torchhsd dependency removed as it is not found on PyPI`n" + `
                          "accelerate==1.8.1`n" + `
                          "einops==0.8.1`n" + `
                          "huggingface-hub==0.34.4`n" + `
                          "matplotlib==3.10.3`n" + `
                          "numpy>=1.25.4`n" + `  
                          "opencv-python==4.11.0.86`n" + `
                          "opencv-python-headless==4.11.0.86`n" + `
                          "peft==0.16.0`n" + `
                          "Pillow==11.0.0`n" + `
                          "safetensors==0.5.3`n" + `
                          "sentencepiece==0.2.0`n" + `
                          "transformers==4.46.2`n" + `
                          "lightning==2.5.2`n" + ` 
                          "imageio==2.37.0`n" + `
                          "imageio-ffmpeg==0.6.0`n" + `
                          "protobuf==3.20.3`n" + `
                          "fiftyone==0.24.1`n" + `
                          "pandas==2.3.0`n" + `
                          "tqdm`n" + `
                          "datasets"
          
          $reqs_content | Out-File -FilePath requirements.txt -Encoding utf8
          Write-Host "Successfully fixed requirements.txt."
        shell: powershell

      # --- 关键修复 2：只安装依赖 ---
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          Write-Host "Dependencies installed. Project installation bypassed."
        shell: powershell

      # --- 调试步骤：打印出当前工作目录的文件和文件夹列表 ---
      - name: Debug Package Structure
        run: |
          Write-Host "Listing contents of the current working directory ($PWD):"
          Get-ChildItem -Path $PWD -Exclude .git | Select-Object Name, PSIsContainer
        shell: powershell

      # --- 关键修复 3：在 Verify import 步骤中强制添加当前目录到 Python 路径并尝试导入 (修复编辑器红线) ---
      - name: Verify import
        run: |
          $py_code = "import sys, os; sys.path.append(os.getcwd()); " + `
                     "try: " + `
                       "import flashvsr; print('✅ flashvsr import OK'); " + `
                     "except ModuleNotFoundError: " + `
                       "try: " + `
                         "import FlashVSR; print('✅ FlashVSR import OK (Capitalized)'); " + `
                       "except ModuleNotFoundError: " + `
                         "print('--- Fatal: Could not find \"flashvsr\" or \"FlashVSR\" in path ---'); sys.exit(1)"
          python -c $py_code
        shell: powershell

      - name: Package build
        run: |
          mkdir release
          Copy-Item -Path examples/WanVSR -Destination release -Recurse -Force
          Compress-Archive -Path release\* -DestinationPath flashvsr_Windows.zip -CompressionLevel Optimal -Force
        shell: powershell

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: flashvsr_Windows
          path: flashvsr_Windows.zip

  release:
    name: Create Smart Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate version and build time
        id: meta
        run: |
          # 自动生成版本号
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF_NAME}"
          else
            COUNT=$(git rev-list --count HEAD)
            TAG_NAME="v0.${COUNT}"
          fi
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

          # 记录当前 UTC 时间
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: notes
        run: |
          echo "⚡ **FlashVSR Auto Build (Windows Only)**" > release_notes.txt
          echo "" >> release_notes.txt
          echo "📅 **Build Time (UTC):** ${{ steps.meta.outputs.build_time }}" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "💻 **Available Platform:**" >> release_notes.txt
          echo "- 🪟 Windows: \`flashvsr_Windows.zip\`" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "📦 Download the zip file for the Windows platform." >> release_notes.txt
          echo "" >> release_notes.txt
          echo "🔢 **Version:** ${{ steps.meta.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "" >> release_notes.txt
          echo "🚀 *Automatically built and published by GitHub Actions.*" >> release_notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: FlashVSR ${{ steps.meta.outputs.tag }}
          body_path: release_notes.txt
          files: artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
